{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","memeText","imgUploaded","updateText","bind","updateImage","generateMeme","e","this","setState","target","value","URL","createObjectURL","files","html2canvas","document","getElementById","allowTaint","then","canvas","data","toDataURL","src","encodeURI","a","href","download","Container","fluid","className","Row","Col","Form","FormGroup","FormLabel","File","id","name","onChange","type","placeholder","Button","variant","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iXAsGeA,G,wDAzFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,SAAU,GACVC,YAAa,MAGf,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBAVH,E,uDAaRG,GACTC,KAAKC,SAAU,CACbR,SAAUM,EAAEG,OAAOC,U,kCAIXJ,GACVC,KAAKC,SAAU,CACbP,YAAaU,IAAIC,gBAAgBN,EAAEG,OAAOI,MAAM,Q,qCAKlDC,IAAYC,SAASC,eAAe,QAAS,CAAEC,YAAY,IAC1DC,MAAK,SAAUC,GACd,IAAMC,EAAOD,EAAOE,UAAU,aAAc,GACtCC,EAAMC,UAAUH,GACtBL,SAASC,eAAe,cAAcM,IAAMA,EAC5C,IAAME,EAAIT,SAASC,eAAe,YAClCQ,EAAEC,KAAOH,EACTE,EAAEE,SAAW,kB,+BAKf,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,OACzB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKF,UAAU,cACb,gDAIJ,8BACE,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACF,EAAA,EAAKG,KAAN,CAAWC,GAAG,OAAOC,KAAK,cAAcC,SAAU/B,KAAKH,gBAI3D,kBAAC6B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,kBAEE,2BAAOK,KAAK,OAAOF,KAAK,WAAW3B,MAAOH,KAAKR,MAAMC,SAAUsC,SAAU/B,KAAKL,WAAYsC,YAAY,mCAM5G,yBAAKJ,GAAG,QACN,yBAAKA,GAAG,YACiB,KAAxB7B,KAAKR,MAAMC,SAAkB,2BAAIO,KAAKR,MAAMC,UAAgB,4CAG7D,yBAAKoC,GAAG,eACsB,OAA3B7B,KAAKR,MAAME,YAAuB,yBAAKqB,IAAI,oCAAsC,yBAAKA,IAAKf,KAAKR,MAAME,gBAI3G,kBAACwC,EAAA,EAAD,CAAQC,QAAQ,eAAeN,GAAG,YAAYO,QAASpC,KAAKF,cAA5D,eAEA,yBAAK+B,GAAG,kBACN,yBAAKA,GAAG,gBAGV,kBAACK,EAAA,EAAD,CAAQC,QAAQ,kBAChB,uBAAGN,GAAG,WAAW3B,OAAO,UAAxB,mB,GAjFQmC,IAAMC,YCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtC,SAASC,eAAe,SDyHpB,kBAAmBsC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e00f9bf.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport html2canvas from 'html2canvas';\nimport { Container } from 'react-bootstrap';\nimport { Row } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\nimport { Form } from 'react-bootstrap';\nimport { FormLabel, FormGroup } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      memeText: \"\",\n      imgUploaded: null\n    }\n\n    this.updateText = this.updateText.bind(this);\n    this.updateImage = this.updateImage.bind(this);\n    this.generateMeme = this.generateMeme.bind(this);\n  }\n\n  updateText(e){\n    this.setState ({\n      memeText: e.target.value\n    })\n  }\n\n  updateImage(e){\n    this.setState ({\n      imgUploaded: URL.createObjectURL(e.target.files[0])\n    })\n  }\n\n  generateMeme(){\n    html2canvas(document.getElementById('meme'), {Â allowTaint: true })\n    .then(function (canvas) {\n      const data = canvas.toDataURL('image/jpeg', 1);\n      const src = encodeURI(data);\n      document.getElementById('screenshot').src = src;\n      const a = document.getElementById('download')\n      a.href = src;\n      a.download = \"mymeme.jpg\";\n    });\n  }\n\n  render() {\n    return (\n      <Container fluid className=\"App\">\n        <Row>\n          <Col className=\"App-header\">\n            <h1>MEME GENERATOR</h1>\n          </Col>\n        </Row>\n\n        <main>\n          <Form>\n            <FormGroup>\n              <FormLabel>\n                <Form.File id=\"file\" name=\"Upload file\" onChange={this.updateImage}/>\n              </FormLabel>\n            </FormGroup>\n\n            <FormGroup>  \n              <FormLabel>\n                Meme text: \n                <input type=\"text\" name=\"userText\" value={this.state.memeText} onChange={this.updateText} placeholder=\"Write the text to your meme\"/>\n              </FormLabel>\n            </FormGroup>\n\n          </Form>\n\n          <div id=\"meme\">\n            <div id=\"memeText\">           \n            {this.state.memeText !== \"\" ? <p>{this.state.memeText}</p> : <p>Example Text</p>}\n          </div>\n\n            <div id=\"memePicture\">\n              {this.state.imgUploaded === null ? <img src=\"https://via.placeholder.com/300\"/> : <img src={this.state.imgUploaded} />}\n            </div>\n          </div>\n\n          <Button variant=\"outline-info\" id=\"save-meme\" onClick={this.generateMeme}>Create meme</Button>\n\n          <div id=\"screenshot-div\">\n            <img id=\"screenshot\" />\n          </div>\n\n          <Button variant=\"outline-danger\">\n          <a id=\"download\" target=\"_blank\">Download</a>\n          </Button>\n\n        </main>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}